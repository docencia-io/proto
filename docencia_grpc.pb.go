// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: docencia.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CoreClient is the client API for Core service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreClient interface {
	// Sends a file to sign.
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordReply, error)
	FindOrCreateUser(ctx context.Context, in *FindOrCreateUserRequest, opts ...grpc.CallOption) (*FindOrCreateUserReply, error)
	GetInfoByID(ctx context.Context, in *InfoIDRequest, opts ...grpc.CallOption) (*InfoReply, error)
}

type coreClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreClient(cc grpc.ClientConnInterface) CoreClient {
	return &coreClient{cc}
}

func (c *coreClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordReply, error) {
	out := new(ChangePasswordReply)
	err := c.cc.Invoke(ctx, "/coreGRPC.Core/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) FindOrCreateUser(ctx context.Context, in *FindOrCreateUserRequest, opts ...grpc.CallOption) (*FindOrCreateUserReply, error) {
	out := new(FindOrCreateUserReply)
	err := c.cc.Invoke(ctx, "/coreGRPC.Core/FindOrCreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) GetInfoByID(ctx context.Context, in *InfoIDRequest, opts ...grpc.CallOption) (*InfoReply, error) {
	out := new(InfoReply)
	err := c.cc.Invoke(ctx, "/coreGRPC.Core/GetInfoByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreServer is the server API for Core service.
// All implementations must embed UnimplementedCoreServer
// for forward compatibility
type CoreServer interface {
	// Sends a file to sign.
	ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordReply, error)
	FindOrCreateUser(context.Context, *FindOrCreateUserRequest) (*FindOrCreateUserReply, error)
	GetInfoByID(context.Context, *InfoIDRequest) (*InfoReply, error)
	mustEmbedUnimplementedCoreServer()
}

// UnimplementedCoreServer must be embedded to have forward compatible implementations.
type UnimplementedCoreServer struct {
}

func (UnimplementedCoreServer) ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedCoreServer) FindOrCreateUser(context.Context, *FindOrCreateUserRequest) (*FindOrCreateUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOrCreateUser not implemented")
}
func (UnimplementedCoreServer) GetInfoByID(context.Context, *InfoIDRequest) (*InfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfoByID not implemented")
}
func (UnimplementedCoreServer) mustEmbedUnimplementedCoreServer() {}

// UnsafeCoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreServer will
// result in compilation errors.
type UnsafeCoreServer interface {
	mustEmbedUnimplementedCoreServer()
}

func RegisterCoreServer(s grpc.ServiceRegistrar, srv CoreServer) {
	s.RegisterService(&Core_ServiceDesc, srv)
}

func _Core_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coreGRPC.Core/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_FindOrCreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOrCreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).FindOrCreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coreGRPC.Core/FindOrCreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).FindOrCreateUser(ctx, req.(*FindOrCreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_GetInfoByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).GetInfoByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coreGRPC.Core/GetInfoByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).GetInfoByID(ctx, req.(*InfoIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Core_ServiceDesc is the grpc.ServiceDesc for Core service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Core_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coreGRPC.Core",
	HandlerType: (*CoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChangePassword",
			Handler:    _Core_ChangePassword_Handler,
		},
		{
			MethodName: "FindOrCreateUser",
			Handler:    _Core_FindOrCreateUser_Handler,
		},
		{
			MethodName: "GetInfoByID",
			Handler:    _Core_GetInfoByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "docencia.proto",
}

// CompilerClient is the client API for Compiler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompilerClient interface {
	Compiler(ctx context.Context, in *CodeRequest, opts ...grpc.CallOption) (*CodeReply, error)
}

type compilerClient struct {
	cc grpc.ClientConnInterface
}

func NewCompilerClient(cc grpc.ClientConnInterface) CompilerClient {
	return &compilerClient{cc}
}

func (c *compilerClient) Compiler(ctx context.Context, in *CodeRequest, opts ...grpc.CallOption) (*CodeReply, error) {
	out := new(CodeReply)
	err := c.cc.Invoke(ctx, "/coreGRPC.Compiler/Compiler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompilerServer is the server API for Compiler service.
// All implementations must embed UnimplementedCompilerServer
// for forward compatibility
type CompilerServer interface {
	Compiler(context.Context, *CodeRequest) (*CodeReply, error)
	mustEmbedUnimplementedCompilerServer()
}

// UnimplementedCompilerServer must be embedded to have forward compatible implementations.
type UnimplementedCompilerServer struct {
}

func (UnimplementedCompilerServer) Compiler(context.Context, *CodeRequest) (*CodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compiler not implemented")
}
func (UnimplementedCompilerServer) mustEmbedUnimplementedCompilerServer() {}

// UnsafeCompilerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompilerServer will
// result in compilation errors.
type UnsafeCompilerServer interface {
	mustEmbedUnimplementedCompilerServer()
}

func RegisterCompilerServer(s grpc.ServiceRegistrar, srv CompilerServer) {
	s.RegisterService(&Compiler_ServiceDesc, srv)
}

func _Compiler_Compiler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompilerServer).Compiler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coreGRPC.Compiler/Compiler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompilerServer).Compiler(ctx, req.(*CodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Compiler_ServiceDesc is the grpc.ServiceDesc for Compiler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Compiler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coreGRPC.Compiler",
	HandlerType: (*CompilerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compiler",
			Handler:    _Compiler_Compiler_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "docencia.proto",
}

// GitlabClient is the client API for Gitlab service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GitlabClient interface {
	// Sends a file to gitlab.
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushReply, error)
	Pull(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (*PullReply, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error)
}

type gitlabClient struct {
	cc grpc.ClientConnInterface
}

func NewGitlabClient(cc grpc.ClientConnInterface) GitlabClient {
	return &gitlabClient{cc}
}

func (c *gitlabClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushReply, error) {
	out := new(PushReply)
	err := c.cc.Invoke(ctx, "/coreGRPC.Gitlab/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitlabClient) Pull(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (*PullReply, error) {
	out := new(PullReply)
	err := c.cc.Invoke(ctx, "/coreGRPC.Gitlab/Pull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitlabClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error) {
	out := new(ListReply)
	err := c.cc.Invoke(ctx, "/coreGRPC.Gitlab/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GitlabServer is the server API for Gitlab service.
// All implementations must embed UnimplementedGitlabServer
// for forward compatibility
type GitlabServer interface {
	// Sends a file to gitlab.
	Push(context.Context, *PushRequest) (*PushReply, error)
	Pull(context.Context, *PullRequest) (*PullReply, error)
	List(context.Context, *ListRequest) (*ListReply, error)
	mustEmbedUnimplementedGitlabServer()
}

// UnimplementedGitlabServer must be embedded to have forward compatible implementations.
type UnimplementedGitlabServer struct {
}

func (UnimplementedGitlabServer) Push(context.Context, *PushRequest) (*PushReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedGitlabServer) Pull(context.Context, *PullRequest) (*PullReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (UnimplementedGitlabServer) List(context.Context, *ListRequest) (*ListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedGitlabServer) mustEmbedUnimplementedGitlabServer() {}

// UnsafeGitlabServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GitlabServer will
// result in compilation errors.
type UnsafeGitlabServer interface {
	mustEmbedUnimplementedGitlabServer()
}

func RegisterGitlabServer(s grpc.ServiceRegistrar, srv GitlabServer) {
	s.RegisterService(&Gitlab_ServiceDesc, srv)
}

func _Gitlab_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitlabServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coreGRPC.Gitlab/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitlabServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gitlab_Pull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitlabServer).Pull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coreGRPC.Gitlab/Pull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitlabServer).Pull(ctx, req.(*PullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gitlab_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitlabServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coreGRPC.Gitlab/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitlabServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gitlab_ServiceDesc is the grpc.ServiceDesc for Gitlab service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gitlab_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coreGRPC.Gitlab",
	HandlerType: (*GitlabServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _Gitlab_Push_Handler,
		},
		{
			MethodName: "Pull",
			Handler:    _Gitlab_Pull_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Gitlab_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "docencia.proto",
}
